// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id        String    @id @default(uuid())
  userd     String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Server    Server[]
  Member    Member[]
  Channel   Channel[]
}

model Server {
  id         String @id @default(uuid())
  userd      String @unique
  name       String
  imageUrl   String @db.Text
  inviteCode String @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Member  Member[]
  Channel Channel[]

  @@index([profileId])
}

enum Role {
  GUEST
  ADMIN
  MODERATOR
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(GUEST)

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  type ChannelType @default(TEXT)
  name String

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  serverId String
  server   Server @relation(fields: [serverId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
